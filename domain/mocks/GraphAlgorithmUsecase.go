// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	domain "algorithm/domain"

	mock "github.com/stretchr/testify/mock"
)

// GraphAlgorithmUsecase is an autogenerated mock type for the GraphAlgorithmUsecase type
type GraphAlgorithmUsecase struct {
	mock.Mock
}

// Process provides a mock function with given fields: start
func (_m *GraphAlgorithmUsecase) Process(start string) error {
	ret := _m.Called(start)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(start)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Return provides a mock function with given fields:
func (_m *GraphAlgorithmUsecase) Return() map[string]domain.BestSoln {
	ret := _m.Called()

	var r0 map[string]domain.BestSoln
	if rf, ok := ret.Get(0).(func() map[string]domain.BestSoln); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]domain.BestSoln)
		}
	}

	return r0
}

type mockConstructorTestingTNewGraphAlgorithmUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGraphAlgorithmUsecase creates a new instance of GraphAlgorithmUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGraphAlgorithmUsecase(t mockConstructorTestingTNewGraphAlgorithmUsecase) *GraphAlgorithmUsecase {
	mock := &GraphAlgorithmUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

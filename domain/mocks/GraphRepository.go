// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	domain "algorithm/domain"

	mock "github.com/stretchr/testify/mock"
)

// GraphRepository is an autogenerated mock type for the GraphRepository type
type GraphRepository struct {
	mock.Mock
}

// AddAdjacencyList provides a mock function with given fields: adjacencyList, start
func (_m *GraphRepository) AddAdjacencyList(adjacencyList map[string]map[string]int, start string) error {
	ret := _m.Called(adjacencyList, start)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]map[string]int, string) error); ok {
		r0 = rf(adjacencyList, start)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddEdge provides a mock function with given fields: form, to, weight
func (_m *GraphRepository) AddEdge(form string, to string, weight int) error {
	ret := _m.Called(form, to, weight)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(form, to, weight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNode provides a mock function with given fields: s
func (_m *GraphRepository) AddNode(s ...string) error {
	_va := make([]interface{}, len(s))
	for _i := range s {
		_va[_i] = s[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(s...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Return provides a mock function with given fields:
func (_m *GraphRepository) Return() domain.Graph {
	ret := _m.Called()

	var r0 domain.Graph
	if rf, ok := ret.Get(0).(func() domain.Graph); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Graph)
	}

	return r0
}

type mockConstructorTestingTNewGraphRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGraphRepository creates a new instance of GraphRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGraphRepository(t mockConstructorTestingTNewGraphRepository) *GraphRepository {
	mock := &GraphRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
